/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import static java.util.stream.Collectors.toList;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.temporal.ValueRange;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

/** https://adventofcode.com/2022/day/4 */
class Day4Test {
  static Pattern SHIFTS = Pattern.compile("(\\d+)-(\\d+),?");

  static Stream<Arguments> args() throws Exception {
    return Stream.of(
        Arguments.of(
            """
            2-4,6-8
            2-3,4-5
            5-7,7-9
            2-8,3-7
            6-6,4-6
            2-6,4-8
            """
                .replace("\n$", "")
                .lines(),
            2,
            true));
  }

  int solve(Stream<String> lines, boolean partOne) {
    return (int)
        lines
            .filter(
                (line) -> {
                  var shifts =
                      SHIFTS
                          .matcher(line)
                          .results()
                          .map(
                              shift ->
                                  ValueRange.of(
                                      Long.parseLong(shift.group(1)),
                                      Long.parseLong(shift.group(2))))
                          .collect(toList());
                  var shiftA = shifts.get(0);
                  var shiftB = shifts.get(1);
                  return (shiftB.isValidValue(shiftA.getMinimum())
                          && shiftB.isValidValue(shiftB.getMaximum()))
                      || (shiftA.isValidValue(shiftB.getMinimum())
                          && shiftA.isValidValue(shiftB.getMaximum()));
                })
            .count();
  }

  @ParameterizedTest
  @MethodSource("args")
  void test(Stream<String> lines, int expected, boolean partOne) throws Exception {
    assertEquals(expected, solve(lines, partOne));
  }
}
