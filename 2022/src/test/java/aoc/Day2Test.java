/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.stream.Stream;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

/** https://adventofcode.com/2022/day/2 */
class Day2Test {
  enum Outcome {
    LOST(0),
    DRAW(3),
    WIN(6);
    public final int score;

    Outcome(int score) {
      this.score = score;
    }
  }

  enum Move {
    ROCK(1),
    PAPER(2),
    SCISSORS(3);
    public final int score;

    Move(int score) {
      this.score = score;
    }

    static Move fromString(String str) {
      return switch (str) {
        case "A", "X" -> ROCK;
        case "B", "Y" -> PAPER;
        case "C", "Z" -> SCISSORS;
        default -> throw new IllegalArgumentException();
      };
    }

    Outcome outcome(Move other) {
      if (this == other) {
        return Outcome.DRAW;
      }
      return switch (this) {
        case ROCK -> other == Move.SCISSORS ? Outcome.WIN : Outcome.LOST;
        case PAPER -> other == Move.ROCK ? Outcome.WIN : Outcome.LOST;
        case SCISSORS -> other == Move.PAPER ? Outcome.WIN : Outcome.LOST;
      };
    }
  }

  static Stream<Arguments> args() throws Exception {
    return Stream.of(
        Arguments.of(
            """
            A Y
            B X
            C Z
            """
                .replace("\n$", "")
                .lines(),
            15),
        Arguments.of(
            new String(Day1Test.class.getResourceAsStream("/input2.txt").readAllBytes()).lines(),
            12_772));
  }

  int solve(Stream<String> lines) {
    return lines.reduce(
        0,
        (total, line) -> {
          var round = line.split(" ");
          var theirMove = Move.fromString(round[0]);
          var yourMove = Move.fromString(round[1]);
          return total + yourMove.outcome(theirMove).score + yourMove.score;
        },
        Integer::sum);
  }

  @ParameterizedTest
  @MethodSource("args")
  void test(Stream<String> lines, int expected) throws Exception {
    int actual = solve(lines);
    assertEquals(expected, actual);
  }
}
